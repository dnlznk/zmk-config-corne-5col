/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT  0
#define LOWER    1
#define RAISE    2
#define FUNCTION 3


// home row mod
#define HRM_A &hml LGUI A
#define HRM_S &hml LALT S
#define HRM_D &hml LSHIFT D
#define HRM_F &hml LCTRL F

#define HRM_J &hmr RCTRL J
#define HRM_K &hmr RSHIFT K
#define HRM_L &hmr RALT L
#define HRM_SEMI &hmr RGUI SEMI

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT)>;
        };

        hml: home_row_mod_left {
            compatible: "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-keypositions = <18 19 20 21 22 23 24 25 26 27 28 29 30 31 32>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible: "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-keypositions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14>;
            hold-trigger-on-release;
        };
    };

    keymap {
            compatible = "zmk,keymap";

        default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//             | TAB | LWR | SPC |   | ENT | RSE  | BACK |
            bindings = <
   &kp Q  &kp W  &kp E   &kp R  &kp T         &kp Y   &kp U  &kp I     &kp O   &kp P
   &HRM_A &HRM_S &HRM_D  &HRM_F &kp G         &kp H   &HRM_J &HRM_K    &HRM_L  &HRM_SEMI
   &kp Z  &kp X  &kp C   &kp V  &kp B         &kp N   &kp M  &kp COMMA &kp DOT &kp FSLH
                 &kp TAB &mo 1  &kp SPACE     &kp RET &mo 2  &kp BACKSPACE
            >;
        };
        lower_layer {
// -----------------------------------------------------------------------------------------
// |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |
// |     |     |     |     |     |   | LFT | DWN |  UP | RGT |     |
// | BT1 | BT2 | BT3 | BT4 | BT5 |   |     | RPT |     |     |     |
//             |     |     | SPC |   | ENT |     |     |
            bindings = <
   &kp N1       &kp N2       &kp N3       &kp N4       &kp N5           &kp N6   &kp N7      &kp N8 &kp N9    &kp N0
   &trans       &trans       &trans       &trans       &trans           &kp LEFT &kp DOWN    &kp UP &kp RIGHT &trans
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &trans   &key_repeat &trans &trans    &trans
                             &trans       &trans       &kp SPACE        &kp RET  &mod 3      &trans
            >;
        };

        raise_layer {
// -----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |     |     |
// |  <  |  [  |  {  |  (  |  '  |   |  "  |  )  |  }  |  ]  |  >  |
// |     |  /  |  =  |  -  |  `  |   |  |  |  _  |  +  |  \  |  ~  |
//             |     |     | SPC |   | ENT |     |     |
            bindings = <
   &kp EXCL &kp AT   &kp HASH     &kp DLLR  &kp PRCNT     &kp CARET &kp AMPS  &kp ASTRK    &none    &none
   &kp LT   &kp LBKT &kp LS(LBRC) &kp LPAR  &kp SQT       &kp MINUS &kp RPAR  &kp LS(RBRC) &kp RBKT &kp GT
   &none    &kp FSLH &kp EQUAL    &kp MINUS &kp GRAVE     &kp PIPE  &kp UNDER &kp PLUS     &kp BSLH &kp TILDE
                     &trans       &trans    &kp SPACE     &kp RET   &mod 2    &trans
            >;
        };

        function_layer {
// -----------------------------------------------------------------------------------------
// |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 |
// |     |PRINT| END | HOME| F11 |   | F12 |PG_UP|PG_DN| INS |     |
// |     |     |BRI- |BRI+ |     |   |     |VOL+ |VOL- |VOLm |     |
//             |     |     | SPC |   | ENT |     |     |
            bindings = <
   &kp F1 &kp F2    &kp F3    &kp F4    &kp F5        &kp F6       &kp F7       &kp F8     &kp F9     &kp F10
   &none  &kp PSCRN &kp END   &kp HOME  &kp F11       &kp F12      &kp PG_UP    &kp PG_DN  &kp INSERT &none
   &none  &none     &kp EQUAL &kp MINUS &kp GRAVE     &kp C_VOL_UP &kp C_VOL_DN &kp C_MUTE &kp BSLH   &none
                    &trans    &trans    &kp SPACE     &kp RET      &trans       &trans
            >;
        };
    };
};
