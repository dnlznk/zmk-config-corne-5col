/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT  0
#define LOWER    1
#define RAISE    2
#define FUNCTION 3


// home row mod
#define HRM_A &hml &kp LGUI &kp A
#define HRM_S &hml &kp LALT &kp S
#define HRM_D &hml &kp LSHIFT &kp D
#define HRM_F &hml &kp LCTRL &kp F

#define HRM_J &hmr &kp RCTRL &kp J
#define HRM_K &hmr &kp RSHIFT &kp K
#define HRM_L &hmr &kp RALT &kp L
#define HRM_SEMI &hmr &kp RGUI &kp SEMI

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <MOD_LSFT>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-keypositions = <18 19 20 21 22 23 24 25 26 27 28 29 30 31 32>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-keypositions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q  &kp W  &kp E   &kp R  &kp T         &kp Y   &kp U  &kp I      &kp O   &kp P
                HRM_A HRM_S HRM_D  HRM_F &kp G         &kp H   HRM_J HRM_K     HRM_L  HRM_SEMI
                &kp Z  &kp X  &kp C   &kp V  &kp B         &kp N   &kp M  &kp COMMA &kp DOT &kp FSLH
                          &kp TAB &mo 1  &kp SPACE         &kp RET &mo 2  &kp BACKSPACE
            >;
        };
        lower_layer {
            bindings = <
                &kp N1        &kp N2        &kp N3        &kp N4        &kp N5             &kp N6   &kp N7      &kp N8 &kp N9    &kp N0
                &trans        &trans        &trans        &trans        &trans             &kp LEFT &kp DOWN    &kp UP &kp RIGHT &trans
                &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &trans   &key_repeat &trans &trans    &trans
                                          &trans        &trans        &kp SPACE          &kp RET  &mo 3       &trans
            >;
        };

        raise_layer {
            bindings = <
                &kp EXCL &kp AT   &kp HASH  &kp DLLR  &kp PRCNT         &kp CARET &kp AMPS  &kp ASTRK &none    &none
                &kp LT   &kp LBKT &kp LBRC  &kp LPAR  &kp SQT           &kp DQT   &kp RPAR  &kp RBRC  &kp RBKT &kp GT
                &none    &kp FSLH &kp EQUAL &kp MINUS &kp GRAVE         &kp PIPE  &kp UNDER &kp PLUS  &kp BSLH &kp TILDE
                                          &trans        &trans    &kp SPACE          &kp RET   &mo 3       &trans
            >;
        };

        function_layer {
            bindings = <
                &kp F1 &kp F2    &kp F3    &kp F4    &kp F5          &kp F6        &kp F7        &kp F8      &kp F9      &kp F10
                &none  &kp PSCRN &kp END   &kp HOME  &kp F11         &kp F12       &kp PG_UP     &kp PG_DN   &kp INSERT  &none
                &none  &none     &kp C_BRI_DN &kp C_BRI_UP &none     &none         &kp C_VOL_UP &kp C_VOL_DN &kp C_MUTE  &none
                                          &trans    &trans    &kp SPACE          &kp RET       &trans        &trans
            >;
        };
    };
};
